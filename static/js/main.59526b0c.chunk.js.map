{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","webcamRef","React","useRef","useState","image","setImage","mode","setMode","videoConstraints","width","height","facingMode","flexDirection","justifyContent","alignItems","style","backgroundColor","borderRadius","bg","audio","ref","imageSmoothing","screenshotFormat","onClick","img","current","getScreenshot","marginTop","leftIcon","Camera","color","padding","marginLeft","boxSize","objectFit","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SA2FeA,MA3Ef,WACE,IAAMC,EAAYC,IAAMC,OAAe,MACvC,EAA0BD,IAAME,SAAoC,MAApE,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBJ,IAAME,SAAS,QAAvC,mBAAOG,EAAP,KAAaC,EAAb,KAUMC,EAAmB,CACvBC,MAAO,KACPC,OAAQ,IACRC,WAAYL,GAOd,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CACEI,OAAO,QACPE,cAAc,SACdC,eAAe,SACfC,WAAW,SACXC,MAAO,CAAEC,gBAAiB,WAL5B,UAOE,cAAC,IAAD,CAAKD,MAAO,CAAEN,MAAO,IAAKC,OAAQ,IAAKO,aAAc,IAAMC,GAAG,UAA9D,SACE,cAAC,IAAD,CACEV,iBAAkBA,EAClBW,OAAO,EACPC,IAAKpB,EACLqB,gBAAc,EACdZ,MAAO,IACPM,MAAO,CACLE,aAAc,GACdP,OAAQ,KAEVY,iBAAiB,iBAGrB,eAAC,IAAD,CAAMV,cAAc,MAAME,WAAW,SAArC,UACE,cAAC,IAAD,CACES,QA3CM,WAAO,IAAD,EACdC,EAAG,UAAGxB,EAAUyB,eAAb,aAAG,EAAmBC,cAAc,CAC3CjB,MAAO,KACPC,OAAQ,OAEVL,EAASmB,IAuCDT,MAAO,CAAEY,UAAW,IACpBC,SAAU,cAACC,EAAA,EAAD,IAHZ,qBAOA,cAAC,IAAD,CACEN,QApCe,WACrBhB,EAAkB,SAATD,EAAiB,cAAc,SAoClCS,MAAO,CACLC,gBAAiB,QACjBc,MAAO,QACPC,QAAS,GACTtB,MAAO,GACPC,OAAQ,GACRO,aAAc,GACdU,UAAW,GACXK,WAAY,SAKjB5B,GAAS,cAAC,IAAD,CAAO6B,QAAQ,QAAQC,UAAU,QAAQC,IAAK/B,UCvEjDgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.59526b0c.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport {\n  Flex,\n  Heading,\n  Input,\n  Button,\n  ChakraProvider,\n  Box,\n  Image,\n} from \"@chakra-ui/react\";\nimport FlipCameraAndroidIcon from \"@material-ui/icons/FlipCameraAndroid\";\n\nimport { Camera } from \"@material-ui/icons\";\nimport Webcam from \"react-webcam\";\n\nfunction App() {\n  const webcamRef = React.useRef<Webcam>(null);\n  const [image, setImage] = React.useState<string | null | undefined>(null);\n  const [mode, setMode] = React.useState(\"user\");\n\n  const capture = () => {\n    const img = webcamRef.current?.getScreenshot({\n      width: 1920,\n      height: 1080,\n    });\n    setImage(img);\n  };\n\n  const videoConstraints = {\n    width: 1080,\n    height: 1000,\n    facingMode: mode,\n  };\n\n  const handleFacingMode = () => {\n      setMode((mode === 'user')?\"environment\":\"user\")\n  };\n\n  return (\n    <ChakraProvider>\n      <Flex\n        height=\"100vh\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        style={{ backgroundColor: \"#123456\" }}\n      >\n        <Box style={{ width: 400, height: 500, borderRadius: 10 }} bg=\"#f1f1f1\">\n          <Webcam\n            videoConstraints={videoConstraints}\n            audio={false}\n            ref={webcamRef}\n            imageSmoothing\n            width={400}\n            style={{\n              borderRadius: 10,\n              height: 500,\n            }}\n            screenshotFormat=\"image/jpeg\"\n          />\n        </Box>\n        <Flex flexDirection=\"row\" alignItems=\"center\">\n          <Button\n            onClick={capture}\n            style={{ marginTop: 10 }}\n            leftIcon={<Camera />}\n          >\n            Capture\n          </Button>\n          <FlipCameraAndroidIcon\n            onClick={handleFacingMode}\n            style={{\n              backgroundColor: \"black\",\n              color: \"white\",\n              padding: 10,\n              width: 50,\n              height: 43,\n              borderRadius: 10,\n              marginTop: 10,\n              marginLeft: 20,\n            }}\n          />\n        </Flex>\n\n        {image && <Image boxSize=\"500px\" objectFit=\"cover\" src={image} />}\n      </Flex>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}