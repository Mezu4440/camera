{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["videoConstraints","width","height","facingMode","App","webcamRef","React","useRef","useState","image","setImage","flexDirection","justifyContent","alignItems","style","borderRadius","bg","audio","ref","imageSmoothing","screenshotFormat","onClick","img","current","getScreenshot","marginTop","leftIcon","Camera","boxSize","objectFit","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAuDA,IAAMA,EAAmB,CACvBC,MAAO,KACPC,OAAQ,IACRC,WAAY,QAGCC,EA9Cf,WACE,IAAMC,EAAYC,IAAMC,OAAe,MACvC,EAA0BD,IAAME,SAAoC,MAApE,mBAAOC,EAAP,KAAcC,EAAd,KAOA,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CACER,OAAO,QACPS,cAAc,SACdC,eAAe,SACfC,WAAW,SAJb,UAME,cAAC,IAAD,CAAKC,MAAO,CAAEb,MAAO,IAAKC,OAAQ,IAAKa,aAAc,IAAMC,GAAG,UAA9D,SACE,cAAC,IAAD,CACEhB,iBAAkBA,EAClBiB,OAAO,EACPC,IAAKb,EACLc,gBAAc,EACdC,iBAAiB,iBAGrB,cAAC,IAAD,CACEC,QAvBQ,WAAO,IAAD,EACdC,EAAG,UAAGjB,EAAUkB,eAAb,aAAG,EAAmBC,gBAC/Bd,EAASY,IAsBHR,MAAO,CAAEW,UAAW,IACpBC,SAAU,cAACC,EAAA,EAAD,IAHZ,qBAQClB,GAAS,cAAC,IAAD,CAAOmB,QAAQ,QAAQC,UAAU,QAAQC,IAAKrB,UCnCjDsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b052c486.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport {\n  Flex,\n  Heading,\n  Input,\n  Button,\n  ChakraProvider,\n  Box,\n  Image,\n} from \"@chakra-ui/react\";\n\nimport { Camera } from \"@material-ui/icons\";\nimport Webcam from \"react-webcam\";\n\nfunction App() {\n  const webcamRef = React.useRef<Webcam>(null);\n  const [image, setImage] = React.useState<string | null | undefined>(null);\n\n  const capture = () => {\n    const img = webcamRef.current?.getScreenshot();\n    setImage(img);\n  };\n\n  return (\n    <ChakraProvider>\n      <Flex\n        height=\"100vh\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Box style={{ width: 400, height: 500, borderRadius: 10 }} bg=\"#f1f1f1\">\n          <Webcam\n            videoConstraints={videoConstraints}\n            audio={false}\n            ref={webcamRef}\n            imageSmoothing\n            screenshotFormat=\"image/jpeg\"\n          />\n        </Box>\n        <Button\n          onClick={capture}\n          style={{ marginTop: 10 }}\n          leftIcon={<Camera />}\n        >\n          Capture\n        </Button>\n\n        {image && <Image boxSize=\"150px\" objectFit=\"cover\" src={image} />}\n      </Flex>\n    </ChakraProvider>\n  );\n}\n\nconst videoConstraints = {\n  width: 1080,\n  height: 1000,\n  facingMode: \"user\",\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}